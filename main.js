
let ddd ='asd';  // обьявили переменную
console.log(ddd);  // вызвали переменную, в рез-те в девтулс имеем: asd
ddd = 'xxx';  // преопределили значение переменной
console.log(ddd);  // вызвали переменную, в рез-те в девтулс имеем: xxx



let nnn = 20;  // обьявили переменную
nnn = nnn/2;  // преопределили значение переменной, здесь итерпретотор кода видит следующее: ddd=20/2
console.log(nnn); // вызвали переменную, в рез-те в девтулс имеем: 10

let aaa = (1+2)/10; // правильная запись, если мы хотим сложить 0.1 + 0.2
console.log(aaa);

// второй вариант, если мы хотим сложить 0.1 + 0.2 
let a = 0.1;
let b = 0.2;
let ab = ((0.1*10)+(0.2*10))/10;
console.log(ab);

let bbb = ((1+2)/10)/10; // если мы хотим сложить (0.1 + 0.2)/10
console.log(bbb); 


// Конкатинация
let c1 = 'AAA';
let c2 = 'DDD';
let c3 = 'BBB + c1';
let c = c1 + c2 +c3;
console.log(c);

// Стринговое выражение
let d1 = 'Старый добрый козел, ';
let d2 = `Жил на свете козел, ${d1} Ел капусту и морковь, Бе-е-е-е!`;
console.log(d2);



// Команда, позволяющая найти конкретный элемент в html-коде
let dd1 = document.querySelector('div'); 
console.log(dd1);
let dd2 = document.querySelector('.text1');
console.log(dd2);
let dd3 = document.querySelector('.text2');
console.log(dd3);

// команда, заменяющая содержимое конкретного элемента HTML-кода на значение переменной
//dd3.innerHTML = 'Это очень хорошо :)'; // Здесь присвоено  новое значение (Это очень хорошо :) ) 
//переменной dd3  элемента  html-кода  (класс .text2)
//console.log(dd3);

// Обратная операция, земеняющая значение перменной на содержимое конкретного элемента html-кода
let dd4 = dd3.innerHTML; // Здесь присвоено переменной dd4 значение элемента  html-кода (класс .text2), 
//изначально присвоенное переменной dd3. Если бы мы не закомментировали предыдущее действие, то dd4 было бы 
//присвоено новое значение dd3 "Это очень хорошо :)", а не первоначальное значение "Вот и хорошо!",
// записанное в html-коде
console.log(dd4);


// Булевый тип данных
let e1 = 10;
let e2 = 12;
let result = e1 === e2;
console.log(result);
// В девтулс: ложь

//let e3 = 'box';
//let e4 = 'box';
//let result = e3 === e4;
//console.log(result);
// В девтулс: правда

//let e5 = 'box';
//let e6 = 'boxes';
//let result = e5 === e6;
//console.log(result);
// В девтулс: ложь



// Оператор сравнения IF

//let f1=25;  
//let f2=15;

//if (f1>=f2) {
 //   console.log('Yes!'); // Срабатывает первый оператор
//} 
//else {
    //console.log('No!');
//}

let f1=25; 
let f2=35;

if (f1>=f2) {
    console.log('Yes!');
} 
else {
    console.log('No!'); // Срабатывает второй оператор, т.к. первый не выпоняет условие. esle используется без if в случаях,
// когда нам нужно, чтобы выполнялось одно условие или одна комбинация условий, заложенных в одном операторе if.
// Если оно(и) не выплняе(ю)тся, то все прочие варианты не имеют значения. Когда ситуация может развиваться
// только по двум сценариям: или-или.
}


let f3=10;
let f4=24;

if (f3===f4) {
    console.log('No');
}
else if (f3>f4) {
    console.log('No');
}
else if (f3<f4) {
    console.log('Yes :-)'); // Выполняется это условие оператора
}

// Логическое И, т.е. должны выполняться все условия оператора
let f5=16;
let f6=26;
let f7=36;

if (f5===f6) {
    console.log('No');
}
else if (
    (f6>f5) 
    &&(f6<f7)
    &&(f6=26)
    ) {
    console.log('Yes!!!');  // Выполняются все условия этого оператора
}
else if (f5>f7) {
    console.log('No');
}


// Логическое ИЛИ, т.е. отображется текст того оператора, где первым выполняется одно из условий
let f8=12;
let f9=25;


if (f8>=f9) {
    console.log('No');
}
else if (
    (f8=12)||(f9<=5)
    ) {
    console.log('Yes!!!');  // Первым выполняется одно из условий этого оператора 
}
else if (
    (f8>=13)||(f9=17) //Выполняется одно из  условий этого оператора ТОЖЕ, НО отбражается текст первого 
    // оператора, удовлетворяющего  одному из условий
    ) {
    console.log('Yes');
}


// ЦИКЛЫ - исп-ся, когда один алгоритм нужно повтрить много раз
// создадим счетчик от 0 до 9 для переменной i, т.е. сделаем 10 (итераций) повторений алгоритма

for (let i=0; i<10; i=i+1) { // i=0 - начальное значение переменной; i<10 - условие, до которого будет
                          // происходить изменение в цикле; i=i+1 - изменение, которе должно проиходить в цикле.
console.log(i);
}  
 //Более короткая запись выражения i=i+1: i++ или i+=1(рекомендовано)// 

// ПРИМЕР использования: создаем маркированный список В html-доке <ul ><li class="list"></li></ul>
let str = '';

for (let i=0; i<10; i=i+1) {
    str = `${str}<li>${i}</li>`;
}

const dd5 = document.querySelector('.list');
dd5.innerHTML = str;


// МАССИВЫ - это перменная имеющая упорядоченное множество значений, 
// каждое из которых имеет свой индекс. Индексы нумеруютсч с 0.

let arr = ['cat','dog','chiken','fish']; // Объявляем массив
console.log( arr [2]); // Обращаемся к третьему элементу массива
console.log(arr); // Обращаемся ко всему массиву


let arr2 = ['Порівнюємо два формати серіалізації даних: Protobuf vs JSON', // Создаем другой массив
            'User Acceptance Testing: как менеджеру организовать процесс',
            'Як і навіщо IT-фахівці розвивають українськомовний YouTube',
            'Scala 3: як зміниться синтаксис, система типів і застосування мови'
];

// ПРИМЕР использования: создаем маркированный список В html-доке <ul class="array"></ul>
let str2 = ''; // пустая строка перед списком статей

for (let item of arr2) { // Предписываем переменной item (имя переменной) повторяться пока незакончится массив arr2 
    str2 = `${str2}<li>${item}</li>`; // Пустая строка, маркерованный список, первое значение переменной item 
    //из массива c индексом 0 (ноль)
}

let dd6 = document.querySelector('.array'); // найден элемент html-кода с классом .array
dd6.innerHTML = str2; // элементу html-кода с классом .array присвоено значение переменной str2


 
// Пример использования операторов CONTINUE и BREAK в цикле: 


let arr3 = ['Порівнюємо два формати серіалізації даних: Protobuf vs JSON',
            'User Acceptance Testing: как менеджеру организовать процесс',
            'Як і навіщо IT-фахівці розвивають українськомовний YouTube',
            'Scala 3: як зміниться синтаксис, система типів і застосування мови',
];

// ПРИМЕР использования: создаем маркированный список В html-доке <ul class="array"></ul>
let str3 = ''; // пустая строка перед списком статей

for (let item1 of arr3) { // Предписываем переменной item1 повторяться пока незакончится массив arr2 
    if ( item1.length < 25 ) { // Если это условие не выполняется,то приналичии в цикле оператора continue, цикл 
        continue;              // переходит к другой итеррации. При наличии в цикле оператора break,
    }                     // цикл прекращает выполняться. 
     
    str3 = `${str3}<li>${item1}</li>`; // Пустая строка, маркерованный список, первое значение переменной item1 
     //из массива c индексом 0 (ноль)
    console.log(item1.length);
}

let dd7 = document.querySelector('.array'); // найден элемент html-кода с классом .array
dd7.innerHTML = str3; // элементу html-кода с классом .array присвоено значение переменной str3

// Здесь item1.length - длина переменной в символах, arr3.length - длина массива по количеству его элементов.
 console.log(arr3.length); //- выведет в девтулс длину  массива в элементах, arr3 - имя массива;
 // console.log(item1.length); - выведет в девтулс длину переменной массива в символах, item1 -имя переменной.

 console.log('jdfghfkhjjhlhkhhjk'.length); // эта конструкция выведет в девтулс длину переменной массива 
 // в символах,имя переменной jdfghfkhjjhlhkhhj, (длина 18).
 

// Скалярные и ссылочные типы данных 

let j1=10;
let j2=15;
console.log(j1,j2);

j1=j2;
console.log(j1,j2);

j2=25;
console.log(j1,j2);


let arr4= [10, 15, 25];
let arr5 = [5, 8, 45];
console.log(arr4);
console.log(arr5);

arr4 = arr5;
console.log(arr4);
console.log(arr5);

arr5 = [5, 7, 9];
console.log(arr4);
console.log(arr5);


arr5[0] = 333;
console.log(arr4);
console.log(arr5);

arr6 = ['aaa','bbb'];
arr7 = ['ccc','ddd'];
console.log(arr6);
console.log(arr7);

arr6 = arr7;
console.log(arr6);
console.log(arr7);

arr7[0] = 333;
console.log(arr7);
console.log(arr6);


arr7[0] = 'fff';
console.log(arr6);
console.log(arr7);




